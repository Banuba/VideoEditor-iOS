// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name VideoEditor
import AVFoundation
import AVKit
import CoreGraphics
import CoreMedia
import CoreVideo
import Foundation
import GLKit
import OpenGLES
import Swift
import UIKit
@_exported import VideoEditor
public protocol VideoEditorImageAssetProtocol : AnyObject {
  var duration: Foundation.TimeInterval { get }
  var image: CoreGraphics.CGImage? { get }
  var shouldUseImageEffect: Swift.Bool { get }
  func getOrPreloadImage() -> CoreGraphics.CGImage?
  func unloadImage()
}
@_hasMissingDesignatedInitializers public class AudioMixer {
  public var audioMix: AVFoundation.AVAudioMix {
    get
  }
  public func resetVolumeToDefault(trackId: CoreMedia.CMPersistentTrackID)
  public func setVolume(volume: Swift.Float, for trackId: CoreMedia.CMPersistentTrackID)
  public func volume(for trackId: CoreMedia.CMPersistentTrackID) -> Swift.Float
  public func isVolumeDefault(for trackId: CoreMedia.CMPersistentTrackID) -> Swift.Bool
  @objc deinit
}
public protocol CompositionRenderering : AnyObject {
  init()
  func render(in pixelBuffer: CoreVideo.CVPixelBuffer, allSources: [CoreVideo.CVPixelBuffer], sampleTime: CoreMedia.CMTime, effect: VideoEditor.EditorCompositionEffectProtocol)
}
public enum EditorEffectType {
  case color
  case visual
  case time
  case gif
  case text
  case mask
  public static func == (a: VideoEditor.EditorEffectType, b: VideoEditor.EditorEffectType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol VideoEditorTrackServicing {
  func hasAudioTrack() -> Swift.Bool
  func audioTrackVolume() -> Swift.Float
  func isAudioTrackVolumeChanged() -> Swift.Bool
  func setAudioTrackVolume(_ volume: Swift.Float)
  func setAudioTrackVolume(_ volume: Swift.Float, to player: VideoEditor.EditorPlayer?)
  func addVoiceTrack(items: [VideoEditor.VoiceTrackItem]) -> Swift.Bool
  func hasVoiceTrack() -> Swift.Bool
  func voiceTrackVolume() -> Swift.Float
  func setVoiceTrackVolume(_ volume: Swift.Float)
  func setVoiceTrackVolume(_ volume: Swift.Float, to player: VideoEditor.Playable?)
  func removeVoiceTrack()
}
public protocol ImageSlideshow {
  func exportSlideshow(to: Foundation.URL, from images: [VideoEditor.VideoEditorImageAssetProtocol], quality: Swift.String, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)?)
}
public protocol VideoEditorServicing : VideoEditor.AppliedEffect, VideoEditor.ImageSlideshow, VideoEditor.VideoEditorTrackServicing {
  var asset: AVFoundation.AVAsset? { get }
  var exportFrameDuration: CoreMedia.CMTime { get set }
  func exportVideo(to fileURL: Foundation.URL, quality: Swift.String, watermarkFilterModel: VideoEditor.VideoEditorFilterModel?, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)?)
  func exportVideo(to fileURL: Foundation.URL, using exportVideoInfo: VideoEditor.ExportVideoInfo, watermarkFilterModel: VideoEditor.VideoEditorFilterModel?, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)?)
  func exportAudio(to fileURL: Foundation.URL, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)?)
  func getEditorEffects(type: VideoEditor.EditorEffectType) -> [VideoEditor.VideoEditorFilterModel]
  func setCurrentAsset(_ asset: VideoEditor.VideoEditorAsset)
  func getPlayer(delegate: VideoEditor.PreviewPlayerDelegate?) -> VideoEditor.Playable
  func setEditorEffects(_ effects: [VideoEditor.VideoEditorFilterModel], enableInternalEffects: Swift.Bool, internalEffectStartId: Swift.UInt)
  func getImageGenerator() -> AVFoundation.AVAssetImageGenerator?
  func videoPartsCount() -> Swift.Int
  static func getPlayer(asset: AVFoundation.AVAsset, delegate: VideoEditor.PreviewPlayerDelegate?) -> VideoEditor.Playable
  static func getPlayer(asset: AVFoundation.AVAsset, delegate: VideoEditor.PreviewPlayerDelegate?, instructions: [AVFoundation.AVVideoCompositionInstructionProtocol]?) -> VideoEditor.Playable
}
@_hasMissingDesignatedInitializers public class VideoEditorService {
  public var videoAsset: VideoEditor.VideoEditorAsset? {
    get
    set(value)
  }
  public var asset: AVFoundation.AVAsset? {
    get
  }
  public var exportFrameDuration: CoreMedia.CMTime
  public var audioMixer: VideoEditor.AudioMixer?
  @objc deinit
}
extension VideoEditorService : VideoEditor.AppliedEffect {
  public func applyFilter(effectModel: VideoEditor.VideoEditorFilterModel, start: CoreMedia.CMTime, end: CoreMedia.CMTime, removeSameType: Swift.Bool)
  public func getSpeed(at time: CoreMedia.CMTime) -> Swift.Float
  public func undoLast(type: VideoEditor.EditorEffectType) -> VideoEditor.EditorCompositionEffectProtocol?
  public func undoAll(type: VideoEditor.EditorEffectType)
  public func startCurrentFilter(effectModel: VideoEditor.VideoEditorFilterModel, at: CoreMedia.CMTime)
  public func endCurrentFilter(at: CoreMedia.CMTime)
  public func getCurrentAppliedEffects(type: VideoEditor.EditorEffectType) -> [VideoEditor.EditorCompositionEffectProtocol]
  public func storeStack()
  public func restoreStack()
  public func hasChangesInAppliedEffects() -> Swift.Bool
}
extension VideoEditorService : VideoEditor.VideoEditorServicing {
  public static func getPlayer(asset: AVFoundation.AVAsset, delegate: VideoEditor.PreviewPlayerDelegate?) -> VideoEditor.Playable
  public static func getPlayer(asset: AVFoundation.AVAsset, delegate: VideoEditor.PreviewPlayerDelegate?, instructions: [AVFoundation.AVVideoCompositionInstructionProtocol]?) -> VideoEditor.Playable
  public func getImageGenerator() -> AVFoundation.AVAssetImageGenerator?
  public func exportVideo(to file: Foundation.URL, quality: Swift.String, watermarkFilterModel: VideoEditor.VideoEditorFilterModel?, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)?)
  public func exportVideo(to fileURL: Foundation.URL, using exportVideoInfo: VideoEditor.ExportVideoInfo, watermarkFilterModel: VideoEditor.VideoEditorFilterModel?, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)?)
  public func exportCleanVideo(to file: Foundation.URL, mediaInfo: VideoEditor.ExportVideoInfo, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)?)
  public func exportAudio(to fileURL: Foundation.URL, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)?)
  public func getEditorEffects(type: VideoEditor.EditorEffectType) -> [VideoEditor.VideoEditorFilterModel]
  public func setCurrentAsset(_ asset: VideoEditor.VideoEditorAsset)
  public func getPlayer(delegate: VideoEditor.PreviewPlayerDelegate?) -> VideoEditor.Playable
  public func setEditorEffects(_ effects: [VideoEditor.VideoEditorFilterModel], enableInternalEffects: Swift.Bool, internalEffectStartId: Swift.UInt)
  public func videoPartsCount() -> Swift.Int
}
extension VideoEditorService : VideoEditor.VideoEditorTrackServicing {
  public func removeVoiceTrack()
  public func addVoiceTrack(items: [VideoEditor.VoiceTrackItem]) -> Swift.Bool
  public func audioTrackVolume() -> Swift.Float
  public func isAudioTrackVolumeChanged() -> Swift.Bool
  public func voiceTrackVolume() -> Swift.Float
  public func setAudioTrackVolume(_ volume: Swift.Float)
  public func setAudioTrackVolume(_ volume: Swift.Float, to player: VideoEditor.EditorPlayer?)
  public func setVoiceTrackVolume(_ volume: Swift.Float)
  public func setVoiceTrackVolume(_ volume: Swift.Float, to player: VideoEditor.Playable?)
  public func hasAudioTrack() -> Swift.Bool
  public func hasVoiceTrack() -> Swift.Bool
}
extension VideoEditorService : VideoEditor.ImageSlideshow {
  public func exportSlideshow(to: Foundation.URL, from images: [VideoEditor.VideoEditorImageAssetProtocol], quality: Swift.String, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)?)
}
public class VideoTrimData {
  public var start: CoreMedia.CMTime {
    get
  }
  public var end: CoreMedia.CMTime {
    get
  }
  public var duration: CoreMedia.CMTime {
    get
  }
  public init(start: CoreMedia.CMTime, end: CoreMedia.CMTime)
  @objc deinit
}
public protocol ExportScalable {
  func exportScaled(outputUrl: Foundation.URL, quality: Swift.String, trimData: VideoEditor.VideoTrimData?, completion: ((Swift.Error?) -> Swift.Void)?)
}
public class VideoEditorAsset {
  public var composition: AVFoundation.AVMutableComposition!
  final public let isSlideshow: Swift.Bool
  public var instructions: [AVFoundation.AVVideoCompositionInstructionProtocol]? {
    get
  }
  public var errors: [Swift.Error] {
    get
  }
  public var tracksInfo: [VideoEditor.VideoEditorAssetTrackInfo] {
    get
  }
  public init(tracks: [VideoEditor.VideoEditorAssetTrackInfo], musicTrack: VideoEditor.MediaTrack?, isDebugModeOn: Swift.Bool = false, fillAspectRatioRange: Swift.ClosedRange<CoreGraphics.CGFloat> = CGFloat(0)...CGFloat(0), isSlideshow: Swift.Bool)
  public convenience init(sequence: VideoEditor.VideoSequence, isDebugModeOn: Swift.Bool = false, fillAspectRatioRange: Swift.ClosedRange<CoreGraphics.CGFloat> = CGFloat(0)...CGFloat(0))
  public func reloadComposition()
  public func loadNonExistingThumbnails(completion: (() -> ())?)
  public func getPartIndex(at time: CoreMedia.CMTime) -> Swift.Int?
  @objc deinit
}
extension VideoEditorAsset : VideoEditor.ExportScalable {
  public func exportScaled(outputUrl: Foundation.URL, quality: Swift.String, trimData: VideoEditor.VideoTrimData?, completion: ((Swift.Error?) -> Swift.Void)?)
}
extension VideoEditorAsset {
  public func addTrackInfos(_ trackInfos: [VideoEditor.VideoEditorAssetTrackInfo])
  public func removeTrack(at index: Swift.Int)
  public func removeTrack(with info: VideoEditor.VideoEditorAssetTrackInfo)
  public func moveTrack(fromIndex: Swift.Int, toIndex: Swift.Int)
}
@_hasMissingDesignatedInitializers public class VideoEditorFilterModel {
  final public let filterType: VideoEditor.EditorEffectType
  final public let name: Swift.String
  final public let path: Swift.String
  public var id: Swift.UInt {
    get
  }
  public convenience init(name: Swift.String, type: VideoEditor.EditorEffectType, renderer: VideoEditor.CompositionRenderering.Type?, path: Swift.String = "", id: Swift.UInt, rendererInstance: VideoEditor.CompositionRenderering?)
  @objc deinit
}
public class VideoSequenceItem {
  final public let originalURL: Foundation.URL
  final public let path: Swift.String
  final public let duration: Foundation.TimeInterval
  final public let preview: UIKit.UIImage?
  public var additionalInfo: Any?
  public init(assetUrl url: Foundation.URL, originalURL: Foundation.URL, preview: UIKit.UIImage?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class VideoSequence {
  public var videos: [VideoEditor.VideoSequenceItem]
  public var durations: [Foundation.TimeInterval] {
    get
  }
  public var musicTrack: VideoEditor.MediaTrack? {
    get
  }
  final public let isSlideshow: Swift.Bool
  public func totalDuration() -> Foundation.TimeInterval
  public static func restore(folder: Foundation.URL) -> VideoEditor.VideoSequence
  @objc deinit
}
@objc public class VoiceTrackItem : ObjectiveC.NSObject {
  final public let url: Foundation.URL
  final public let timeRange: CoreMedia.CMTimeRange
  public init(url: Foundation.URL, timeRange: CoreMedia.CMTimeRange)
  @objc deinit
  @objc override dynamic public init()
}
public class ExportVideoInfo {
  final public let width: Swift.Int
  final public let height: Swift.Int
  final public let bitrate: Swift.Int
  final public let frameRate: Swift.Int
  final public let codecType: AVFoundation.AVVideoCodecType
  final public let scalingMode: Swift.String
  public var exportSettings: [Swift.String : Any] {
    get
  }
  public init(width: Swift.Int, height: Swift.Int, bitrate: Swift.Int, frameRate: Swift.Int, codecType: AVFoundation.AVVideoCodecType, scalingMode: Swift.String)
  @objc deinit
}
public protocol Playable : AnyObject {
  func startPlay(loop: Swift.Bool, fixedSpeed: Swift.Bool)
  func startPlay(loop: Swift.Bool, fixedSpeed: Swift.Bool, start: CoreMedia.CMTime, end: CoreMedia.CMTime)
  func pausePlay()
  func stopPlay()
  func resumePlay()
  func previewLayer() -> AVFoundation.AVPlayerLayer
  func smoothlySeek(to time: CoreMedia.CMTime)
  func seek(to time: CoreMedia.CMTime)
  func startStopPlay(loop: Swift.Bool, fixedSpeed: Swift.Bool)
  func reloadPreview()
  func reloadPreview(shouldAutoStart: Swift.Bool)
  var currentTime: Foundation.TimeInterval { get }
  var videoDuration: Swift.Double { get }
  var currentTimeInCMTime: CoreMedia.CMTime { get }
  var videoDurationCMTime: CoreMedia.CMTime { get }
  var isPlaying: Swift.Bool { get }
  var playerItem: AVFoundation.AVPlayerItem? { get }
  var previewPlayerDelegate: VideoEditor.PreviewPlayerDelegate? { get set }
  var avPlayer: AVFoundation.AVPlayer { get }
}
@_hasMissingDesignatedInitializers public class EditorPlayer {
  public var avPlayer: AVFoundation.AVPlayer {
    get
  }
  weak public var previewPlayerDelegate: VideoEditor.PreviewPlayerDelegate?
  public var isPlaying: Swift.Bool
  public var playerItem: AVFoundation.AVPlayerItem? {
    get
  }
  @objc deinit
}
extension EditorPlayer : VideoEditor.Playable {
  public var videoDurationCMTime: CoreMedia.CMTime {
    get
  }
  public var videoDuration: Swift.Double {
    get
  }
  public var currentTimeInCMTime: CoreMedia.CMTime {
    get
  }
  public var currentTime: Foundation.TimeInterval {
    get
  }
  public func seek(to time: CoreMedia.CMTime)
  public func reloadPreview()
  public func reloadPreview(shouldAutoStart: Swift.Bool)
  public func startStopPlay(loop: Swift.Bool, fixedSpeed: Swift.Bool)
  public func stopPlay()
  public func smoothlySeek(to time: CoreMedia.CMTime)
  public func previewLayer() -> AVFoundation.AVPlayerLayer
  public func resumePlay()
  public func pausePlay()
  public func startPlay(loop: Swift.Bool, fixedSpeed: Swift.Bool)
  public func startPlay(loop: Swift.Bool, fixedSpeed: Swift.Bool, start: CoreMedia.CMTime, end: CoreMedia.CMTime)
}
@_hasMissingDesignatedInitializers public class VideoEditor {
  public static func getNewEditorServicing() -> VideoEditor.VideoEditorService
  public static func getNewSequenceServicing() -> VideoEditor.VideoSequenceServicing
  public static func getPlayer(asset: AVFoundation.AVAsset, delegate: VideoEditor.PreviewPlayerDelegate?, instructions: [AVFoundation.AVVideoCompositionInstructionProtocol]?) -> VideoEditor.Playable
  @objc deinit
}
public protocol AppliedEffect : AnyObject {
  func getCurrentAppliedEffects(type: VideoEditor.EditorEffectType) -> [VideoEditor.EditorCompositionEffectProtocol]
  func startCurrentFilter(effectModel: VideoEditor.VideoEditorFilterModel, at: CoreMedia.CMTime)
  func endCurrentFilter(at: CoreMedia.CMTime)
  func undoLast(type: VideoEditor.EditorEffectType) -> VideoEditor.EditorCompositionEffectProtocol?
  func undoAll(type: VideoEditor.EditorEffectType)
  func getSpeed(at time: CoreMedia.CMTime) -> Swift.Float
  func applyFilter(effectModel: VideoEditor.VideoEditorFilterModel, start: CoreMedia.CMTime, end: CoreMedia.CMTime, removeSameType: Swift.Bool)
  func storeStack()
  func restoreStack()
  func hasChangesInAppliedEffects() -> Swift.Bool
}
public protocol EditorCompositionEffectProtocol : AnyObject {
  var startTime: CoreMedia.CMTime { get }
  var endTime: CoreMedia.CMTime { get }
  var id: Swift.UInt { get }
  var path: Swift.String { get }
}
public protocol PreviewPlayerDelegate : AnyObject {
  func playerPlaysFrameAtTime(_ time: CoreMedia.CMTime)
  func didEndPlaying()
}
public class VideoEditorAssetTrackInfo {
  public var originalURL: Foundation.URL {
    get
  }
  public var composition: AVFoundation.AVComposition! {
    get
  }
  public var thumbnail: UIKit.UIImage? {
    get
  }
  public var timeRange: CoreMedia.CMTimeRange {
    get
  }
  public var trimTimeRange: CoreMedia.CMTimeRange
  public var instructions: [AVFoundation.AVVideoCompositionInstructionProtocol]? {
    get
  }
  public var thumbnails: [UIKit.UIImage]
  public var error: Swift.Error? {
    get
  }
  public init(url: Foundation.URL, originalURL: Foundation.URL, thumbnail: UIKit.UIImage?, fillAspectRatioRange: Swift.ClosedRange<CoreGraphics.CGFloat>)
  @objc deinit
}
public class MediaTrack {
  public static var unknownId: Swift.Int64
  final public let url: Foundation.URL
  final public let title: Swift.String?
  final public let id: Swift.Int64
  public init(url: Foundation.URL, id: Swift.Int64, title: Swift.String? = nil)
  @objc deinit
}
public protocol VideoSequenceServicing {
  var videoSequences: [VideoEditor.VideoSequence] { get }
  var currentSequence: VideoEditor.VideoSequence? { get }
  func startNewSequence(musicTrack: VideoEditor.MediaTrack?, isSlideshow: Swift.Bool)
  func startNewSequenceIfNeeded(musicTrack: VideoEditor.MediaTrack?)
  func cancelCurrentSequence()
  func removeAllSequences()
  func resetSequences()
  func addVideo(at url: Foundation.URL, speed: Swift.Double, preview: UIKit.UIImage?)
  func removeLastVideo() -> VideoEditor.VideoSequenceItem?
}
